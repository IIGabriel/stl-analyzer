// Code generated by MockGen. DO NOT EDIT.
// Source: internal/stl/usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"
	stlanalyzer "stl-file-analysis/pkg/stlanalyzer"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CalculateSurfaceArea mocks base method.
func (m *MockUseCase) CalculateSurfaceArea(model []stlanalyzer.Triangle) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateSurfaceArea", model)
	ret0, _ := ret[0].(float64)
	return ret0
}

// CalculateSurfaceArea indicates an expected call of CalculateSurfaceArea.
func (mr *MockUseCaseMockRecorder) CalculateSurfaceArea(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateSurfaceArea", reflect.TypeOf((*MockUseCase)(nil).CalculateSurfaceArea), model)
}

// InitializeModel3D mocks base method.
func (m *MockUseCase) InitializeModel3D(file io.ReadSeeker) (stlanalyzer.Model3D, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeModel3D", file)
	ret0, _ := ret[0].(stlanalyzer.Model3D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeModel3D indicates an expected call of InitializeModel3D.
func (mr *MockUseCaseMockRecorder) InitializeModel3D(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeModel3D", reflect.TypeOf((*MockUseCase)(nil).InitializeModel3D), file)
}
